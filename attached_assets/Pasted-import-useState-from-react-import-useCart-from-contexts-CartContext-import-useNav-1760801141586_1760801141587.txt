import { useState } from 'react';
import { useCart } from '../contexts/CartContext';
import { useNavigation } from '../contexts/NavigationContext';
import { Button } from '../components/ui/button';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { Checkbox } from '../components/ui/checkbox';
import { RadioGroup, RadioGroupItem } from '../components/ui/radio-group';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '../components/ui/select';
import { ImageWithFallback } from '../components/figma/ImageWithFallback';
import { MapPin, Info } from 'lucide-react';
import { toast } from 'sonner@2.0.3';

export function CheckoutPage() {
  const { cart, getTotalPrice } = useCart();
  const { navigateTo } = useNavigation();
  
  const [formData, setFormData] = useState({
    contact: '',
    emailOffers: false,
    country: 'India',
    firstName: '',
    lastName: '',
    address: '',
    apartment: '',
    city: '',
    state: 'Maharashtra',
    pinCode: '',
    phone: '',
    saveInfo: false,
    paymentMethod: 'razorpay',
    billingAddress: 'same',
    discountCode: '',
  });

  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const subtotal = getTotalPrice();
  const shipping = 0; // Free shipping
  const taxRate = 0.18; // 18% tax
  const taxAmount = subtotal * taxRate;
  const total = subtotal + shipping + taxAmount;

  const handlePayNow = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Basic validation
    if (!formData.contact || !formData.firstName || !formData.lastName || 
        !formData.address || !formData.city || !formData.pinCode || !formData.phone) {
      toast.error('Please fill in all required fields');
      return;
    }

    // Simulate payment processing
    toast.success('Order placed successfully!');
    
    // In a real app, this would process payment and create order
    setTimeout(() => {
      navigateTo('home');
    }, 2000);
  };

  const handleApplyDiscount = () => {
    if (formData.discountCode) {
      toast.info('Discount code validation not implemented in demo');
    }
  };

  if (cart.length === 0) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl mb-4">Your cart is empty</h2>
          <Button onClick={() => navigateTo('home')}>Continue Shopping</Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-2xl">SPICE HOUSE</h1>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Left Column - Form */}
          <div className="bg-white p-6 rounded-lg order-2 lg:order-1">
            <form onSubmit={handlePayNow}>
              {/* Contact Section */}
              <div className="mb-6">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg">Contact</h2>
                  <button type="button" className="text-blue-600 text-sm">
                    Sign In
                  </button>
                </div>
                <Input
                  type="text"
                  placeholder="Email or mobile phone number"
                  value={formData.contact}
                  onChange={(e) => handleInputChange('contact', e.target.value)}
                  className="mb-3"
                />
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="emailOffers"
                    checked={formData.emailOffers}
                    onCheckedChange={(checked) => handleInputChange('emailOffers', checked)}
                  />
                  <label htmlFor="emailOffers" className="text-sm cursor-pointer">
                    Email me with news and offers
                  </label>
                </div>
              </div>

              {/* Delivery Section */}
              <div className="mb-6">
                <h2 className="text-lg mb-4">Delivery</h2>
                
                <div className="mb-3">
                  <Label className="text-sm text-gray-600 mb-1 block">Country/Region</Label>
                  <Select value={formData.country} onValueChange={(value) => handleInputChange('country', value)}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="India">India</SelectItem>
                      <SelectItem value="USA">USA</SelectItem>
                      <SelectItem value="UK">UK</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="grid grid-cols-2 gap-3 mb-3">
                  <Input
                    placeholder="First name"
                    value={formData.firstName}
                    onChange={(e) => handleInputChange('firstName', e.target.value)}
                  />
                  <Input
                    placeholder="Last name"
                    value={formData.lastName}
                    onChange={(e) => handleInputChange('lastName', e.target.value)}
                  />
                </div>

                <div className="mb-3 relative">
                  <Input
                    placeholder="Address"
                    value={formData.address}
                    onChange={(e) => handleInputChange('address', e.target.value)}
                  />
                  <MapPin className="absolute right-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
                </div>

                <Input
                  placeholder="Apartment, suite, etc. (optional)"
                  value={formData.apartment}
                  onChange={(e) => handleInputChange('apartment', e.target.value)}
                  className="mb-3"
                />

                <div className="grid grid-cols-2 gap-3 mb-3">
                  <div className="space-y-2">
                    <Select value={formData.city} onValueChange={(value) => handleInputChange('city', value)}>
                      <SelectTrigger>
                        <SelectValue placeholder="City" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="Mumbai">Mumbai</SelectItem>
                        <SelectItem value="Pune">Pune</SelectItem>
                        <SelectItem value="Nagpur">Nagpur</SelectItem>
                      </SelectContent>
                    </Select>
                    <div>
                      <span className="text-xs text-gray-500">State</span>
                      <div className="text-sm">{formData.state}</div>
                    </div>
                  </div>
                  <Input
                    placeholder="PIN code"
                    value={formData.pinCode}
                    onChange={(e) => handleInputChange('pinCode', e.target.value)}
                  />
                </div>

                <div className="mb-3 relative">
                  <Input
                    placeholder="Phone"
                    value={formData.phone}
                    onChange={(e) => handleInputChange('phone', e.target.value)}
                  />
                  <Info className="absolute right-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
                </div>

                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="saveInfo"
                    checked={formData.saveInfo}
                    onCheckedChange={(checked) => handleInputChange('saveInfo', checked)}
                  />
                  <label htmlFor="saveInfo" className="text-sm cursor-pointer">
                    Save this information for next time
                  </label>
                </div>
              </div>

              {/* Shipping Method Section */}
              <div className="mb-6">
                <h2 className="text-lg mb-2">Shipping method</h2>
                <p className="text-sm text-gray-600 mb-3">
                  Free Shipping on Prepaid Orders (online payment only)
                </p>
                <div className="bg-gray-100 p-4 rounded text-sm text-gray-500">
                  Enter your shipping address to view available shipping methods.
                </div>
              </div>

              {/* Payment Section */}
              <div className="mb-6">
                <h2 className="text-lg mb-2">Payment</h2>
                <p className="text-sm text-gray-600 mb-4">
                  All transactions are secure and encrypted.
                </p>

                <RadioGroup value={formData.paymentMethod} onValueChange={(value) => handleInputChange('paymentMethod', value)}>
                  <div className="border rounded-lg overflow-hidden mb-3">
                    <div className="flex items-center space-x-2 p-4 border-b bg-blue-50">
                      <RadioGroupItem value="razorpay" id="razorpay" />
                      <label htmlFor="razorpay" className="flex-1 cursor-pointer">
                        <div className="flex items-center justify-between">
                          <span className="text-sm">Razorpay Secure (UPI, Cards, Int'l Cards, Wallets)</span>
                          <div className="flex gap-1 items-center">
                            <span className="text-xs px-2 py-0.5 bg-white border rounded">UPI</span>
                            <span className="w-6 h-4 bg-blue-700 rounded"></span>
                            <span className="w-6 h-4 bg-red-600 rounded"></span>
                            <span className="text-xs">+17</span>
                          </div>
                        </div>
                      </label>
                    </div>
                    
                    {formData.paymentMethod === 'razorpay' && (
                      <div className="p-4 bg-gray-50">
                        <div className="flex justify-center mb-3">
                          <div className="border-2 border-gray-300 rounded p-4 w-32 h-20 flex items-center justify-center relative">
                            <svg className="w-16 h-16 text-gray-300" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                              <rect x="3" y="5" width="18" height="14" rx="2" strokeWidth="2"/>
                              <path d="M3 10h18" strokeWidth="2"/>
                            </svg>
                            <svg className="w-8 h-8 text-gray-400 absolute" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                              <path d="M12 15l-4-4m0 0l4-4m-4 4h13" strokeWidth="2" strokeLinecap="round"/>
                            </svg>
                          </div>
                        </div>
                        <p className="text-xs text-gray-600 text-center">
                          After clicking "Pay now", you will be redirected to Razorpay Secure (UPI, Cards, Int'l Cards, Wallets) to complete your purchase securely.
                        </p>
                      </div>
                    )}
                  </div>

                  <div className="flex items-center space-x-2 p-4 border rounded-lg">
                    <RadioGroupItem value="cod" id="cod" />
                    <label htmlFor="cod" className="text-sm cursor-pointer">
                      Cash on Delivery (COD)
                    </label>
                  </div>
                </RadioGroup>
              </div>

              {/* Billing Address Section */}
              <div className="mb-6">
                <h2 className="text-lg mb-4">Billing address</h2>
                <RadioGroup value={formData.billingAddress} onValueChange={(value) => handleInputChange('billingAddress', value)}>
                  <div className="flex items-center space-x-2 p-4 border rounded-lg mb-2 bg-blue-50">
                    <RadioGroupItem value="same" id="same" />
                    <label htmlFor="same" className="text-sm cursor-pointer">
                      Same as shipping address
                    </label>
                  </div>
                  <div className="flex items-center space-x-2 p-4 border rounded-lg">
                    <RadioGroupItem value="different" id="different" />
                    <label htmlFor="different" className="text-sm cursor-pointer">
                      Use a different billing address
                    </label>
                  </div>
                </RadioGroup>
              </div>

              {/* Pay Now Button */}
              <Button type="submit" className="w-full bg-blue-600 hover:bg-blue-700 text-white py-6 text-lg">
                Pay now
              </Button>

              {/* Footer Links */}
              <div className="mt-6 flex flex-wrap gap-3 justify-center text-xs text-blue-600">
                <a href="#" className="hover:underline">Refund policy</a>
                <a href="#" className="hover:underline">Shipping</a>
                <a href="#" className="hover:underline">Privacy policy</a>
                <a href="#" className="hover:underline">Terms of service</a>
                <a href="#" className="hover:underline">Contact</a>
              </div>
            </form>
          </div>

          {/* Right Column - Order Summary */}
          <div className="bg-white p-6 rounded-lg order-1 lg:order-2">
            <div className="space-y-4">
              {/* Cart Items */}
              {cart.map((item, index) => (
                <div key={`${item.id}-${item.size}-${index}`} className="flex gap-4">
                  <div className="relative">
                    <ImageWithFallback
                      src={item.image}
                      alt={item.name}
                      className="w-16 h-16 object-cover rounded border"
                    />
                    <span className="absolute -top-2 -right-2 bg-gray-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                      {item.quantity}
                    </span>
                  </div>
                  <div className="flex-1">
                    <h3 className="text-sm">{item.name}</h3>
                    {item.size && (
                      <p className="text-xs text-gray-500">{item.size}</p>
                    )}
                  </div>
                  <div className="text-sm">
                    ₹{(item.price * item.quantity).toFixed(2)}
                  </div>
                </div>
              ))}

              {/* Discount Code */}
              <div className="border-t pt-4">
                <div className="flex gap-2">
                  <Input
                    placeholder="Discount code"
                    value={formData.discountCode}
                    onChange={(e) => handleInputChange('discountCode', e.target.value)}
                    className="flex-1"
                  />
                  <Button 
                    type="button" 
                    variant="outline" 
                    onClick={handleApplyDiscount}
                    className="px-6"
                  >
                    Apply
                  </Button>
                </div>
              </div>

              {/* Pricing Summary */}
              <div className="border-t pt-4 space-y-2">
                <div className="flex justify-between text-sm">
                  <span>Subtotal</span>
                  <span>₹{subtotal.toFixed(2)}</span>
                </div>
                <div className="flex justify-between text-sm">
                  <div className="flex items-center gap-1">
                    <span>Shipping</span>
                    <Info className="w-3 h-3 text-gray-400" />
                  </div>
                  <span className="text-gray-500">Enter shipping address</span>
                </div>
              </div>

              {/* Total */}
              <div className="border-t pt-4">
                <div className="flex justify-between items-center">
                  <span>Total</span>
                  <div className="text-right">
                    <div className="text-xs text-gray-500">INR</div>
                    <div className="text-xl">₹{total.toFixed(2)}</div>
                  </div>
                </div>
                <p className="text-xs text-gray-500 mt-1 text-right">
                  Including ₹{taxAmount.toFixed(2)} in taxes
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}